@startuml

title 低代码平台 - API设计图

!define PRIMARY_COLOR #61DAFB
!define SECONDARY_COLOR #4FC08D  
!define ACCENT_COLOR #FF6B35
!define AI_COLOR #9C27B0

package "认证与用户API" <<PRIMARY_COLOR>> {
    interface "/auth/login" as LoginAPI {
        POST: 用户登录
        --
        Request: email, password, captcha
        Response: accessToken, refreshToken, userInfo
        --
        支持: 邮箱登录、第三方OAuth
    }
    
    interface "/auth/register" as RegisterAPI {
        POST: 用户注册
        --
        Request: email, password, username, inviteCode
        Response: user, verificationRequired
        --
        邮箱验证 + 邀请码机制
    }
    
    interface "/auth/oauth/{provider}" as OAuthAPI {
        GET: 第三方登录
        --
        Providers: github, google, wechat
        Callback: /auth/callback/{provider}
        --
        OAuth 2.0 标准流程
    }
    
    interface "/users/profile" as UserProfileAPI {
        GET: 获取用户信息
        PUT: 更新用户信息
        --
        Request: displayName, avatar, preferences
        Response: userProfile, teamInfo
    }
}

package "项目管理API" <<SECONDARY_COLOR>> {
    interface "/projects" as ProjectAPI {
        GET: 项目列表
        POST: 创建项目
        --
        Query: teamId, type, status, page, size
        Body: name, description, framework, template
        --
        支持分页、筛选、模板初始化
    }
    
    interface "/projects/{id}" as ProjectDetailAPI {
        GET: 项目详情
        PUT: 更新项目
        DELETE: 删除项目
        --
        Include: pages, components, config
    }
    
    interface "/projects/{id}/pages" as PageAPI {
        GET: 页面列表
        POST: 创建页面
        PUT: 更新页面
        DELETE: 删除页面
        --
        支持页面层级结构管理
    }
    
    interface "/projects/{id}/export" as ProjectExportAPI {
        POST: 导出项目
        --
        Format: zip, git_repo, npm_package
        Options: includeAssets, minify
        --
        异步导出 + 下载链接
    }
}

package "设计器API" <<ACCENT_COLOR>> {
    interface "/designer/components" as ComponentLibraryAPI {
        GET: 组件库列表
        --
        Query: category, framework, keywords
        Response: libraries, components, schemas
        --
        支持组件搜索和分类
    }
    
    interface "/designer/canvas" as CanvasAPI {
        GET: 获取画布数据
        PUT: 保存画布设计
        --
        Real-time: WebSocket support
        Conflict: Operation Transform
        --
        多人协作实时同步
    }
    
    interface "/designer/preview" as PreviewAPI {
        POST: 生成预览
        --
        Request: pageId, deviceType, theme
        Response: previewUrl, assets
        --
        支持多设备预览
    }
    
    interface "/designer/assets" as AssetAPI {
        POST: 上传资源
        GET: 资源列表
        DELETE: 删除资源
        --
        Support: images, fonts, icons
        CDN: 自动优化和分发
    }
}

package "代码生成API" {
    interface "/codegen/generate" as CodeGenAPI {
        POST: 生成代码
        --
        Request: projectId, framework, options
        Response: generatedCode, buildConfig
        --
        支持React、Vue、小程序
    }
    
    interface "/codegen/build" as BuildAPI {
        POST: 构建应用
        GET: 构建状态
        --
        Async: 异步构建任务
        Status: pending, building, success, failed
        --
        Webhook通知构建状态
    }
    
    interface "/codegen/deploy" as DeployAPI {
        POST: 部署应用
        --
        Platforms: vercel, netlify, custom
        Config: domain, env, buildCmd
        --
        一键部署到多平台
    }
}

package "AI智能API" <<AI_COLOR>> {
    interface "/ai/design/suggest" as AIDesignAPI {
        POST: 设计建议
        --
        Request: context, userInput, currentDesign
        Response: suggestions, confidence
        --
        基于上下文的智能推荐
    }
    
    interface "/ai/code/generate" as AICodeAPI {
        POST: AI代码生成
        --
        Request: description, framework, examples
        Response: generatedCode, explanation
        --
        自然语言转代码
    }
    
    interface "/ai/chat" as AIChatAPI {
        POST: AI对话
        --
        WebSocket: /ws/ai/chat/{sessionId}
        Context: 保持对话上下文
        --
        智能助手对话接口
    }
    
    interface "/ai/optimize" as AIOptimizeAPI {
        POST: AI优化建议
        --
        Request: pageData, performanceMetrics
        Response: optimizations, impacts
        --
        性能和用户体验优化
    }
}

package "数据源API" {
    interface "/datasources" as DataSourceAPI {
        GET: 数据源列表
        POST: 创建数据源
        PUT: 更新数据源
        TEST: 测试连接
        --
        Types: REST, GraphQL, Database, Mock
    }
    
    interface "/datasources/{id}/models" as DataModelAPI {
        GET: 数据模型
        POST: 创建模型
        --
        Auto-generate: 从API自动生成
        Schema: JSON Schema validation
    }
    
    interface "/datasources/{id}/proxy" as DataProxyAPI {
        ANY: 数据代理
        --
        Proxy: 代理外部API请求
        Cache: 智能缓存策略
        Transform: 数据转换和映射
    }
}

package "协作与版本API" {
    interface "/collaboration/rooms/{id}" as CollabRoomAPI {
        WebSocket: 实时协作
        --
        Events: cursor, selection, operation
        Sync: Operational Transform
        --
        多人实时协作
    }
    
    interface "/versions" as VersionAPI {
        GET: 版本列表
        POST: 创建版本
        PUT: 切换版本
        --
        Git-like: 版本控制机制
        Diff: 版本差异对比
    }
    
    interface "/comments" as CommentAPI {
        GET: 评论列表
        POST: 添加评论
        PUT: 回复评论
        --
        Target: page, component, code
        Mention: @用户提醒
    }
}

package "模板市场API" {
    interface "/marketplace/templates" as TemplateMarketAPI {
        GET: 模板列表
        POST: 发布模板
        --
        Search: 模板搜索和筛选
        Rating: 评分和评论系统
    }
    
    interface "/marketplace/components" as ComponentMarketAPI {
        GET: 组件市场
        POST: 发布组件
        --
        Package: NPM包管理
        Version: 语义化版本控制
    }
}

' API Gateway 路由管理
[API Gateway] --> LoginAPI : "认证路由"
[API Gateway] --> ProjectAPI : "项目路由"
[API Gateway] --> ComponentLibraryAPI : "设计器路由"
[API Gateway] --> CodeGenAPI : "代码生成路由"
[API Gateway] --> AIDesignAPI : "AI服务路由"

' BFF层聚合
[Designer BFF] --> CanvasAPI : "画布数据聚合"
[Designer BFF] --> ComponentLibraryAPI : "组件数据聚合"
[Designer BFF] --> AIDesignAPI : "AI推荐聚合"

[Mobile BFF] --> ProjectAPI : "移动端项目数据"
[Mobile BFF] --> PreviewAPI : "移动端预览"

[Admin BFF] --> UserProfileAPI : "用户管理聚合"
[Admin BFF] --> TemplateMarketAPI : "模板管理聚合"

' 服务间调用
ProjectAPI --> PageAPI : "项目页面关联"
CanvasAPI --> AssetAPI : "画布资源管理"
CodeGenAPI --> BuildAPI : "代码构建流程"
BuildAPI --> DeployAPI : "构建部署流程"

AIDesignAPI --> AICodeAPI : "设计到代码"
AICodeAPI --> CodeGenAPI : "AI辅助生成"

DataSourceAPI --> DataModelAPI : "数据源模型"
DataModelAPI --> DataProxyAPI : "模型代理"

' WebSocket连接
CollabRoomAPI --> CanvasAPI : "实时协作同步"
AIChatAPI --> AIDesignAPI : "AI对话设计"
PreviewAPI --> CanvasAPI : "预览更新同步"

' 认证和权限
LoginAPI ..> ProjectAPI : "JWT认证"
UserProfileAPI ..> CollabRoomAPI : "用户授权"
OAuthAPI ..> UserProfileAPI : "OAuth认证"

note top of LoginAPI : "JWT + Refresh Token\n多因素认证支持\nSSO集成"

note top of ComponentLibraryAPI : "组件市场集成\n版本管理\n依赖解析"

note top of AIDesignAPI : "GPT-4集成\n上下文感知\n个性化推荐"

note top of CollabRoomAPI : "WebSocket实时同步\nOperational Transform\n冲突解决"

@enduml 