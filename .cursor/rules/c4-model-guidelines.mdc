---
description: 
globs: 
alwaysApply: true
---
# C4模型最佳实践指南

## C4模型概述

C4模型是一套用于描述和交流软件架构的方法，包含4个层次的图表：

1. **Context (上下文图)** - 系统的整体概览
2. **Container (容器图)** - 系统的高级技术构建块  
3. **Component (组件图)** - 容器内部的组件结构
4. **Code (代码图)** - 具体的代码实现（可选）

参考项目示例：
- [restaurant-pos-c4-context.puml](mdc:restaurant-pos/restaurant-pos-c4-context.puml)
- [social-media-c4-context.puml](mdc:social-media/social-media-c4-context.puml)

## Level 1: 上下文图 (Context Diagram)

### 目的
展示软件系统如何适应其环境，包括：
- 系统的边界和范围
- 系统的用户（人员和其他系统）
- 系统与外部世界的交互

### 关键元素
```puml
Person(user, "用户名", "用户描述和职责")
System(system, "系统名", "系统的核心功能描述") 
System_Ext(external, "外部系统", "外部系统功能描述")
Rel(user, system, "交互描述", "技术/协议")
```

### 最佳实践
- 专注于人员和软件系统，不要包含技术细节
- 使用简单清晰的标签和描述
- 保持图表简洁，避免过多细节
- 明确系统边界和职责范围

## Level 2: 容器图 (Container Diagram)

### 目的  
放大单个软件系统，显示其内部的高级技术构建块（容器）：
- 应用程序和数据存储
- 容器之间的交互和依赖关系
- 技术选择的概览

### 关键元素
```puml
Container(app, "应用名称", "技术栈", "应用功能描述")
ContainerDb(db, "数据库名称", "数据库类型", "存储内容描述")
Container_Ext(external, "外部容器", "技术", "外部服务描述")
Rel(app, db, "读写数据", "SQL/JDBC")
```

### 技术栈标注示例
- `"Spring Boot, Java 17"`
- `"React, TypeScript"`  
- `"MySQL 8.0"`
- `"Redis 6.0"`
- `"Nginx"`

### 最佳实践
- 显示主要的技术选择
- 清晰标注容器间的通信协议
- 包含关键的配置和部署信息
- 区分内部容器和外部依赖

## Level 3: 组件图 (Component Diagram)

### 目的
放大单个容器，显示其内部组件：
- 组件的职责和交互
- 重要的设计模式和架构决策
- 组件的技术实现方式

### 关键元素  
```puml
Component(controller, "控制器组件", "REST API", "处理HTTP请求")
Component(service, "业务服务", "Service Layer", "业务逻辑处理") 
Component(repository, "数据访问", "Repository Pattern", "数据持久化")
ComponentDb(db, "数据库", "MySQL", "数据存储")
```

### 最佳实践
- 专注于重要的架构组件
- 显示关键的设计模式
- 标注组件的技术实现
- 避免过度详细的内部实现

## 人员类型定义

### 内部人员
```puml
Person(user, "终端用户", "使用系统主要功能的普通用户")
Person(admin, "管理员", "系统管理和配置人员")  
Person(operator, "运营人员", "日常运营和监控人员")
```

### 外部人员
```puml
Person_Ext(customer, "客户", "外部客户或合作伙伴")
Person_Ext(supplier, "供应商", "提供服务或产品的第三方")
```

## 系统类型定义

### 内部系统
```puml
System(core, "核心系统", "主要业务功能系统")
System(support, "支撑系统", "提供基础服务的系统")
```

### 外部系统
```puml
System_Ext(payment, "支付系统", "第三方支付服务")
System_Ext(notification, "通知系统", "短信、邮件通知服务")
System_Ext(auth, "认证系统", "第三方身份认证服务")
```

## 关系类型和协议

### 同步通信
```puml
Rel(a, b, "同步调用", "HTTPS/REST API")
Rel(a, b, "数据查询", "SQL/JDBC")  
Rel(a, b, "RPC调用", "gRPC")
```

### 异步通信
```puml
Rel(a, b, "消息发送", "Message Queue/Kafka")
Rel(a, b, "事件通知", "WebSocket")
Rel(a, b, "批量处理", "Scheduled Job")
```

### 数据流向
```puml
Rel_U(a, b, "向上数据流")
Rel_D(a, b, "向下数据流")  
Rel_L(a, b, "向左数据流")
Rel_R(a, b, "向右数据流")
```

## 布局和样式

### 布局控制
```puml
LAYOUT_WITH_LEGEND()           # 显示图例
LAYOUT_TOP_DOWN()             # 从上到下布局
LAYOUT_LEFT_RIGHT()           # 从左到右布局
LAYOUT_AS_SKETCH()            # 手绘风格
```

### 边界定义
```puml
System_Boundary(boundary1, "系统边界名称") {
    System(internal1, "内部系统1")
    System(internal2, "内部系统2")
}

Enterprise_Boundary(enterprise, "企业边界") {
    System_Boundary(dept, "部门边界") {
        System(system, "部门系统")
    }
}
```

## 图表质量检查清单

### 上下文图检查
- [ ] 是否清晰显示了系统边界？
- [ ] 是否包含了所有关键的外部依赖？
- [ ] 用户角色是否明确定义？
- [ ] 是否避免了技术实现细节？

### 容器图检查  
- [ ] 是否显示了主要的技术选择？
- [ ] 容器职责是否清晰分离？
- [ ] 是否标注了关键的通信协议？
- [ ] 部署边界是否明确？

### 组件图检查
- [ ] 组件职责是否单一明确？
- [ ] 是否体现了重要的设计模式？
- [ ] 组件间依赖是否合理？
- [ ] 是否避免了过度设计？

## 版本演进管理

### 版本标记
```puml
title 系统名称 - 图表类型 (v2.1.0)
note right : 更新日期：2024-01-15
note right : 主要变更：添加缓存层
```

### 变更追踪
- 重大架构变更时创建新版本文件
- 在文件头部添加变更日志注释
- 保留关键历史版本以供参考
- 使用Git标签标记重要的架构里程碑

## 团队协作规范

### 评审流程
1. 架构设计初稿完成后进行团队评审
2. 重点关注系统边界和职责划分
3. 验证外部依赖的必要性和可行性
4. 确保技术选择的合理性

### 维护责任
- 架构师：负责整体架构设计和演进
- 开发团队：负责具体实现和细节完善  
- 产品团队：验证业务需求的完整性
- 运维团队：确保部署和运维的可行性
