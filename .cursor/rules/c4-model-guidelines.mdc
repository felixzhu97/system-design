---
description: 
globs: 
alwaysApply: true
---
# C4模型最佳实践指南

## C4模型概述

C4模型是一套用于描述和交流软件架构的方法，包含4个层次的图表：

1. **Context (上下文图)** - 系统的整体概览
2. **Container (容器图)** - 系统的高级技术构建块  
3. **Component (组件图)** - 容器内部的组件结构
4. **Code (代码图)** - 具体的代码实现（可选）

参考项目示例：
- [restaurant-pos-c4-context.puml](mdc:restaurant-pos/restaurant-pos-c4-context.puml)
- [social-media-c4-context.puml](mdc:social-media/social-media-c4-context.puml)

## Level 1: 上下文图 (Context Diagram)

### 目的
展示软件系统如何适应其环境，包括：
- 系统的边界和范围
- 系统的用户（人员和其他系统）
- 系统与外部世界的交互

### 关键元素
```puml
Person(user, "用户名", "用户描述和职责")
System(system, "系统名", "系统的核心功能描述") 
System_Ext(external, "外部系统", "外部系统功能描述")
Rel(user, system, "交互描述", "技术/协议")
```

### 最佳实践
- 专注于人员和软件系统，不要包含技术细节
- 使用简单清晰的标签和描述
- 保持图表简洁，避免过多细节
- 明确系统边界和职责范围

## Level 2: 容器图 (Container Diagram)

### 目的  
放大单个软件系统，显示其内部的高级技术构建块（容器）：
- 应用程序和数据存储
- 容器之间的交互和依赖关系
- 技术选择的概览

### 关键元素
```puml
Container(webapp, "Web应用", "React, TypeScript", "用户界面和交互")
Container(mobileapp, "移动应用", "React Native", "移动端用户界面")
Container(api, "API网关", "Node.js, Express", "API路由和认证")
Container(bff, "BFF服务", "Next.js API Routes", "前端专用后端服务")
ContainerDb(db, "数据库", "PostgreSQL", "业务数据存储")
Container_Ext(cdn, "CDN", "Cloudflare", "静态资源分发")
Rel(webapp, api, "API调用", "HTTPS/REST")
Rel(webapp, cdn, "资源加载", "HTTPS")
```

### 技术栈标注示例
#### 前端容器
- `"React 18, TypeScript, Vite"`
- `"Vue 3, TypeScript, Nuxt.js"`
- `"Next.js 14, TypeScript, Tailwind CSS"`
- `"React Native, TypeScript"`
- `"Flutter, Dart"`
- `"Electron, React"`
- `"微信小程序, TypeScript"`

#### 后端容器
- `"Node.js, Express, TypeScript"`
- `"Node.js, Fastify, Prisma"`
- `"Bun, Hono, TypeScript"`
- `"Spring Boot, Java 17"`

#### 数据存储
- `"PostgreSQL 15"`
- `"Redis 7.0"`
- `"MongoDB Atlas"`

#### 基础设施
- `"Nginx, Docker"`
- `"Vercel, Edge Functions"`
- `"Cloudflare, CDN"`

### 最佳实践
- 显示主要的技术选择
- 清晰标注容器间的通信协议
- 包含关键的配置和部署信息
- 区分内部容器和外部依赖

## Level 3: 组件图 (Component Diagram)

### 目的
放大单个容器，显示其内部组件：
- 组件的职责和交互
- 重要的设计模式和架构决策
- 组件的技术实现方式

### 关键元素  
```puml
Component(router, "路由组件", "React Router", "页面路由管理")
Component(store, "状态管理", "Zustand/Redux", "全局状态管理")
Component(hooks, "自定义Hooks", "React Hooks", "业务逻辑封装")
Component(components, "UI组件", "React Components", "用户界面组件")
Component(services, "API服务", "Axios/Fetch", "HTTP请求封装")
Component(utils, "工具函数", "TypeScript Utils", "通用工具方法")
ComponentDb(localStorage, "本地存储", "LocalStorage", "客户端数据缓存")
```

### 最佳实践
- 专注于重要的架构组件
- 显示关键的设计模式
- 标注组件的技术实现
- 避免过度详细的内部实现

## 人员类型定义

### 内部人员
```puml
Person(user, "终端用户", "使用系统主要功能的普通用户")
Person(admin, "管理员", "系统管理和配置人员")  
Person(operator, "运营人员", "日常运营和监控人员")
```

### 外部人员
```puml
Person_Ext(customer, "客户", "外部客户或合作伙伴")
Person_Ext(supplier, "供应商", "提供服务或产品的第三方")
```

## 系统类型定义

### 内部系统
```puml
System(core, "核心系统", "主要业务功能系统")
System(support, "支撑系统", "提供基础服务的系统")
```

### 外部系统
```puml
System_Ext(cdn, "CDN服务", "Cloudflare、AWS CloudFront等内容分发网络")
System_Ext(auth, "认证服务", "Auth0、Supabase Auth等身份认证服务")
System_Ext(analytics, "数据分析", "Google Analytics、Mixpanel等分析服务")
System_Ext(monitoring, "监控服务", "Sentry、LogRocket等错误监控")
System_Ext(deployment, "部署平台", "Vercel、Netlify等部署服务")
System_Ext(payment, "支付系统", "Stripe、PayPal等支付服务")
System_Ext(notification, "通知推送", "Firebase Cloud Messaging等推送服务")
System_Ext(storage, "云存储", "AWS S3、Cloudinary等文件存储")
```

## 关系类型和协议

### 同步通信
```puml
Rel(a, b, "API调用", "HTTPS/REST API")
Rel(a, b, "GraphQL查询", "HTTPS/GraphQL")  
Rel(a, b, "RPC调用", "tRPC/gRPC")
Rel(a, b, "资源请求", "HTTPS/静态资源")
```

### 异步通信
```puml
Rel(a, b, "实时通信", "WebSocket/Socket.io")
Rel(a, b, "服务器推送", "Server-Sent Events")
Rel(a, b, "消息队列", "Redis Pub/Sub")
Rel(a, b, "事件触发", "Webhook")
Rel(a, b, "后台任务", "Web Workers/Service Workers")
```

### 数据流向
```puml
Rel_U(a, b, "向上数据流")
Rel_D(a, b, "向下数据流")  
Rel_L(a, b, "向左数据流")
Rel_R(a, b, "向右数据流")
```

## 布局和样式

### 布局控制
```puml
LAYOUT_WITH_LEGEND()           # 显示图例
LAYOUT_TOP_DOWN()             # 从上到下布局
LAYOUT_LEFT_RIGHT()           # 从左到右布局
LAYOUT_AS_SKETCH()            # 手绘风格
```

### 边界定义
```puml
System_Boundary(boundary1, "系统边界名称") {
    System(internal1, "内部系统1")
    System(internal2, "内部系统2")
}

Enterprise_Boundary(enterprise, "企业边界") {
    System_Boundary(dept, "部门边界") {
        System(system, "部门系统")
    }
}
```

## 图表质量检查清单

### 上下文图检查
- [ ] 是否清晰显示了系统边界？
- [ ] 是否包含了所有关键的外部依赖？
- [ ] 用户角色是否明确定义？
- [ ] 是否避免了技术实现细节？

### 容器图检查  
- [ ] 是否显示了主要的前端技术选择？
- [ ] 是否区分了Web端、移动端、小程序等不同容器？
- [ ] 是否标注了关键的通信协议（REST、GraphQL、WebSocket）？
- [ ] 部署边界是否明确（CDN、Edge、服务器端）？
- [ ] 是否考虑了微前端架构的拆分？

### 组件图检查
- [ ] 前端组件职责是否单一明确（UI、状态、业务逻辑）？
- [ ] 是否体现了重要的前端设计模式（Hooks、HOC、Context）？
- [ ] 组件间依赖是否合理（避免循环依赖）？
- [ ] 是否避免了过度抽象和过度拆分？
- [ ] 是否考虑了组件的可复用性和可维护性？

## 版本演进管理

### 版本标记
```puml
title 系统名称 - 图表类型 (v2.1.0)
note right : 更新日期：2024-01-15
note right : 主要变更：添加缓存层
```

### 变更追踪
- 重大架构变更时创建新版本文件
- 在文件头部添加变更日志注释
- 保留关键历史版本以供参考
- 使用Git标签标记重要的架构里程碑

## 大前端特殊架构模式

### 微前端架构 (Micro-Frontend)
```puml
System_Boundary(mfe, "微前端架构") {
    Container(shell, "主应用壳", "single-spa", "路由和应用加载")
    Container(mfe1, "用户模块", "React", "用户管理功能")
    Container(mfe2, "订单模块", "Vue", "订单管理功能")
    Container(mfe3, "商品模块", "Angular", "商品管理功能")
    Container(shared, "共享库", "Webpack Federation", "公共组件和工具")
}

Rel(shell, mfe1, "动态加载", "Module Federation")
Rel(shell, mfe2, "动态加载", "Module Federation")
Rel(shell, mfe3, "动态加载", "Module Federation")
Rel(mfe1, shared, "使用", "共享依赖")
Rel(mfe2, shared, "使用", "共享依赖")
```

### SSR/SSG架构模式
```puml
Container(nextjs, "Next.js应用", "React, SSR", "服务端渲染")
Container(nuxtjs, "Nuxt.js应用", "Vue, SSR", "服务端渲染")
Container(astro, "Astro应用", "Multi-Framework, SSG", "静态站点生成")
Container_Ext(edge, "Edge运行时", "Vercel Edge", "边缘计算")

Rel(nextjs, edge, "部署", "边缘函数")
Rel(nuxtjs, edge, "部署", "边缘函数")
```

### 跨端开发架构
```puml
System_Boundary(crossplatform, "跨端开发架构") {
    Container(rn, "React Native", "JavaScript", "iOS/Android应用")
    Container(flutter, "Flutter应用", "Dart", "跨平台移动应用")
    Container(electron, "Electron应用", "Web技术", "桌面应用")
    Container(tauri, "Tauri应用", "Rust + Web", "轻量桌面应用")
    Container(uniapp, "Uni-app", "Vue", "多端统一开发")
}
```

## 团队协作规范

### 评审流程
1. 前端架构设计初稿完成后进行团队评审
2. 重点关注多端一致性和技术栈选型
3. 验证性能优化策略和用户体验
4. 确保开发效率和维护成本的平衡
5. 评估微前端拆分的合理性

### 维护责任
- 前端架构师：负责前端技术栈选型和架构设计
- 前端开发团队：负责具体实现和组件开发
- UI/UX设计师：确保用户体验的一致性
- 产品团队：验证业务需求和用户体验
- DevOps团队：确保CI/CD和部署的可行性
- 性能优化团队：负责前端性能监控和优化
