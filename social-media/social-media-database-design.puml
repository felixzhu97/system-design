@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title 社交媒体平台 - 数据库设计架构

LAYOUT_WITH_LEGEND()

' 用户域数据模型
package "用户域 (PostgreSQL)" {
    entity "users" as users {
        + user_id : UUID [PK]
        --
        username : VARCHAR(50) [UK]
        email : VARCHAR(100) [UK]
        phone : VARCHAR(20) [UK]
        password_hash : VARCHAR(255)
        avatar_url : VARCHAR(500)
        display_name : VARCHAR(100)
        bio : TEXT
        birth_date : DATE
        gender : ENUM
        location : VARCHAR(100)
        verified : BOOLEAN
        follower_count : INTEGER
        following_count : INTEGER
        post_count : INTEGER
        status : ENUM
        created_at : TIMESTAMP
        updated_at : TIMESTAMP
        last_login_at : TIMESTAMP
    }
    
    entity "user_profiles" as profiles {
        + profile_id : UUID [PK]
        + user_id : UUID [FK]
        --
        cover_image_url : VARCHAR(500)
        website : VARCHAR(200)
        occupation : VARCHAR(100)
        education : VARCHAR(200)
        interests : JSONB
        privacy_settings : JSONB
        notification_settings : JSONB
        theme_preferences : JSONB
        language : VARCHAR(10)
        timezone : VARCHAR(50)
        created_at : TIMESTAMP
        updated_at : TIMESTAMP
    }
    
    entity "user_relationships" as relationships {
        + relationship_id : UUID [PK]
        + follower_id : UUID [FK]
        + following_id : UUID [FK]
        --
        relationship_type : ENUM
        status : ENUM
        created_at : TIMESTAMP
        updated_at : TIMESTAMP
    }
    
    entity "user_sessions" as sessions {
        + session_id : UUID [PK]
        + user_id : UUID [FK]
        --
        device_id : VARCHAR(100)
        device_type : ENUM
        device_info : JSONB
        ip_address : INET
        user_agent : TEXT
        refresh_token : VARCHAR(500)
        expires_at : TIMESTAMP
        created_at : TIMESTAMP
        last_activity_at : TIMESTAMP
    }
}

' 内容域数据模型
package "内容域 (MongoDB)" {
    entity "posts" as posts {
        + _id : ObjectId [PK]
        --
        user_id : UUID
        content_type : String
        title : String
        content : String
        media_urls : Array<String>
        tags : Array<String>
        mentions : Array<UUID>
        location : GeoJSON
        privacy_level : String
        allow_comments : Boolean
        allow_shares : Boolean
        like_count : Number
        comment_count : Number
        share_count : Number
        view_count : Number
        engagement_score : Number
        quality_score : Number
        moderation_status : String
        created_at : Date
        updated_at : Date
        published_at : Date
    }
    
    entity "comments" as comments {
        + _id : ObjectId [PK]
        --
        post_id : ObjectId
        user_id : UUID
        parent_comment_id : ObjectId
        content : String
        media_urls : Array<String>
        mentions : Array<UUID>
        like_count : Number
        reply_count : Number
        moderation_status : String
        created_at : Date
        updated_at : Date
    }
    
    entity "media_files" as media {
        + _id : ObjectId [PK]
        --
        user_id : UUID
        file_type : String
        original_url : String
        thumbnail_url : String
        compressed_urls : Object
        file_size : Number
        dimensions : Object
        duration : Number
        alt_text : String
        metadata : Object
        processing_status : String
        upload_session : String
        created_at : Date
        processed_at : Date
    }
    
    entity "hashtags" as hashtags {
        + _id : ObjectId [PK]
        --
        tag_name : String
        normalized_name : String
        usage_count : Number
        trending_score : Number
        category : String
        description : String
        created_at : Date
        last_used_at : Date
    }
}

' 社交域数据模型
package "社交域 (Neo4j图数据库)" {
    entity "User" as graphUser {
        + userId : String [PK]
        --
        username : String
        displayName : String
        followerCount : Integer
        followingCount : Integer
        verifiedStatus : Boolean
        accountCreated : DateTime
        lastActive : DateTime
    }
    
    entity "Post" as graphPost {
        + postId : String [PK]
        --
        content : String
        contentType : String
        engagementScore : Float
        qualityScore : Float
        publishedAt : DateTime
    }
    
    entity "Topic" as graphTopic {
        + topicId : String [PK]
        --
        topicName : String
        category : String
        popularity : Float
    }
}

' 实时数据缓存
package "缓存层 (Redis Cluster)" {
    entity "user_sessions_cache" as userCache {
        Key Pattern: "user:session:{user_id}"
        --
        session_data : JSON
        device_info : JSON
        permissions : Set
        ttl : 7200 seconds
    }
    
    entity "feed_cache" as feedCache {
        Key Pattern: "feed:{user_id}:{page}"
        --
        post_ids : List<String>
        last_updated : Timestamp
        ttl : 300 seconds
    }
    
    entity "trending_cache" as trendingCache {
        Key Pattern: "trending:{category}:{time_range}"
        --
        hashtags : Sorted Set
        posts : Sorted Set
        users : Sorted Set
        ttl : 900 seconds
    }
    
    entity "counters_cache" as countersCache {
        Key Pattern: "counters:{entity_type}:{entity_id}"
        --
        likes : Integer
        comments : Integer
        shares : Integer
        views : Integer
        ttl : No expiration
    }
}

' 搜索引擎索引
package "搜索引擎 (Elasticsearch)" {
    entity "posts_index" as postsIndex {
        Index: "social-posts"
        --
        post_id : keyword
        user_id : keyword
        content : text (analyzed)
        tags : keyword
        location : geo_point
        engagement_score : float
        quality_score : float
        created_at : date
        privacy_level : keyword
    }
    
    entity "users_index" as usersIndex {
        Index: "social-users"
        --
        user_id : keyword
        username : text (analyzed)
        display_name : text (analyzed)
        bio : text (analyzed)
        location : text
        verified : boolean
        follower_count : integer
        created_at : date
    }
    
    entity "hashtags_index" as hashtagsIndex {
        Index: "social-hashtags"
        --
        tag_id : keyword
        tag_name : text (analyzed)
        usage_count : integer
        trending_score : float
        category : keyword
        last_used : date
    }
}

' 消息队列主题
package "消息队列 (Apache Kafka)" {
    entity "user_events" as userEvents {
        Topic: "social.user.events"
        --
        Partitions: 12
        Replication: 3
        Retention: 7 days
        Message Types:
        - user.registered
        - user.updated
        - user.followed
        - user.unfollowed
    }
    
    entity "content_events" as contentEvents {
        Topic: "social.content.events"
        --
        Partitions: 24
        Replication: 3
        Retention: 30 days
        Message Types:
        - post.created
        - post.updated
        - post.deleted
        - comment.created
    }
    
    entity "interaction_events" as interactionEvents {
        Topic: "social.interaction.events"
        --
        Partitions: 48
        Replication: 3
        Retention: 14 days
        Message Types:
        - post.liked
        - post.shared
        - comment.liked
        - user.mentioned
    }
}

' 数据仓库
package "数据仓库 (ClickHouse)" {
    entity "user_behavior_events" as behaviorEvents {
        Table: user_behavior_events
        Engine: MergeTree
        --
        event_id : UUID
        user_id : UUID
        event_type : String
        event_data : String (JSON)
        session_id : String
        device_type : String
        ip_address : IPv4
        user_agent : String
        timestamp : DateTime
        date : Date
        hour : UInt8
    }
    
    entity "content_metrics" as contentMetrics {
        Table: content_metrics_daily
        Engine: SummingMergeTree
        --
        date : Date
        post_id : String
        user_id : UUID
        views : UInt64
        likes : UInt64
        comments : UInt64
        shares : UInt64
        engagement_time : UInt64
        bounce_rate : Float32
    }
}

' 关系连接
users ||--o{ profiles : "user_id"
users ||--o{ sessions : "user_id"
users ||--o{ relationships : "follower_id/following_id"
posts ||--o{ comments : "post_id"
posts }o--|| hashtags : "tags"
posts }o--|| media : "media_urls"

' 图数据库关系
graphUser -[hidden]-> graphPost : "POSTED"
graphUser -[hidden]-> graphUser : "FOLLOWS"
graphPost -[hidden]-> graphTopic : "TAGGED_WITH"
graphUser -[hidden]-> graphPost : "LIKED"
graphUser -[hidden]-> graphPost : "COMMENTED_ON"

note right of users
用户核心数据表
- 支持多种登录方式
- 实名认证状态
- 社交关系统计
- 隐私设置管理
end note

note right of posts
内容数据模型
- 支持多媒体内容
- 地理位置信息
- 标签和提及功能
- 隐私级别控制
- 智能推荐评分
end note

note right of feedCache
推荐缓存策略
- 个性化信息流
- 实时热度计算
- 分页数据缓存
- 智能预加载
end note

note bottom of behaviorEvents
用户行为分析
- 实时行为追踪
- 多维度数据分析
- 个性化推荐训练
- 用户画像构建
end note

@enduml 