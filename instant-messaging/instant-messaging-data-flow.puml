@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Dynamic.puml

title 即时通讯系统 - 消息发送数据流程

Person(sender, "发送者", "发送消息的用户")
Person(receiver, "接收者", "接收消息的用户")

System_Boundary(imSystem, "即时通讯系统") {
    Container(clientApp, "客户端应用", "React Native/Web", "用户界面")
    Container(wsGateway, "WebSocket网关", "Socket.io", "实时连接管理")
    Container(apiGateway, "API网关", "Kong", "HTTP API入口")
    Container(messageService, "消息服务", "Go", "消息处理核心")
    Container(userService, "用户服务", "Node.js", "用户信息管理")
    Container(authService, "认证服务", "Go", "身份验证")
    Container(notificationService, "通知服务", "Python", "消息推送")
    ContainerDb(messageDb, "消息数据库", "MongoDB", "消息持久化")
    ContainerDb(redis, "缓存", "Redis", "在线状态缓存")
    Container(messageQueue, "消息队列", "Kafka", "异步处理")
}

System_Ext(pushService, "推送服务", "APNs/FCM")

' 1. 用户发送消息
Rel(sender, clientApp, "1. 发送消息", "WebSocket")
Rel(clientApp, wsGateway, "2. 转发消息", "WebSocket连接")

' 2. 消息验证和处理
Rel(wsGateway, authService, "3. 验证身份", "HTTP/gRPC")
Rel_Return(authService, wsGateway, "3.1 验证结果", "认证成功")

Rel(wsGateway, messageService, "4. 处理消息", "HTTP/gRPC")
Rel(messageService, userService, "5. 验证接收者", "HTTP调用")
Rel_Return(userService, messageService, "5.1 用户信息", "用户有效")

' 3. 消息存储
Rel(messageService, messageDb, "6. 存储消息", "MongoDB写入")
Rel_Return(messageDb, messageService, "6.1 存储确认", "存储成功")

' 4. 在线状态检查
Rel(messageService, redis, "7. 检查在线状态", "Redis查询")
Rel_Return(redis, messageService, "7.1 在线状态", "接收者状态")

' 5. 实时推送 (如果在线)
alt 接收者在线
    Rel(messageService, wsGateway, "8a. 实时推送", "WebSocket通知")
    Rel(wsGateway, clientApp, "9a. 推送消息", "WebSocket")
    Rel(clientApp, receiver, "10a. 显示消息", "UI更新")
else 接收者离线
    ' 6. 异步通知 (如果离线)
    Rel(messageService, messageQueue, "8b. 发送到队列", "Kafka Producer")
    Rel(messageQueue, notificationService, "9b. 消费消息", "Kafka Consumer")
    Rel(notificationService, pushService, "10b. 推送通知", "HTTPS/API")
    Rel(pushService, receiver, "11b. 系统推送", "Push Notification")
end

' 7. 消息状态更新
Rel(messageService, redis, "12. 更新状态", "Redis写入")
note right : 更新消息投递状态

' 8. 接收者读取消息 (后续)
Rel(receiver, clientApp, "13. 上线/打开应用", "用户操作")
Rel(clientApp, apiGateway, "14. 获取消息", "HTTPS/REST")
Rel(apiGateway, messageService, "15. 查询消息", "HTTP调用")
Rel(messageService, messageDb, "16. 读取消息", "MongoDB查询")
Rel_Return(messageDb, messageService, "16.1 消息数据", "历史消息")
Rel_Return(messageService, apiGateway, "15.1 返回消息", "消息列表")
Rel_Return(apiGateway, clientApp, "14.1 消息响应", "JSON数据")
Rel(clientApp, receiver, "17. 显示消息", "UI渲染")

' 9. 已读回执
Rel(receiver, clientApp, "18. 标记已读", "用户操作")
Rel(clientApp, apiGateway, "19. 已读回执", "HTTPS/PUT")
Rel(apiGateway, messageService, "20. 更新已读", "HTTP调用")
Rel(messageService, messageDb, "21. 更新状态", "MongoDB更新")
Rel(messageService, wsGateway, "22. 通知发送者", "WebSocket")
Rel(wsGateway, clientApp, "23. 已读通知", "WebSocket")
Rel(clientApp, sender, "24. 显示已读", "UI更新")

@enduml 