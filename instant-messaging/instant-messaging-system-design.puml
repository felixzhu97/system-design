@startuml
title 即时通讯系统 - 系统架构设计

!define REACT_COLOR #61DAFB
!define NODE_COLOR #339933
!define GO_COLOR #00ADD8
!define PYTHON_COLOR #3776AB
!define MONGO_COLOR #47A248
!define REDIS_COLOR #DC382D

package "客户端层" <<REACT_COLOR>> {
    [Web应用] as WebApp <<React>>
    [移动应用] as MobileApp <<React Native>>
    [桌面应用] as DesktopApp <<Electron>>
    [管理后台] as AdminPanel <<Vue.js>>
}

package "接入层" {
    [负载均衡器] as LoadBalancer <<Nginx>>
    [API网关] as APIGateway <<Kong>>
    [WebSocket网关] as WSGateway <<Socket.io>>
}

package "微服务层" {
    package "核心服务" <<NODE_COLOR>> {
        [用户服务] as UserService <<Node.js>>
        [消息服务] as MessageService <<Go>>
        [群组服务] as GroupService <<Node.js>>
        [频道服务] as ChannelService <<Python>>
    }
    
    package "功能服务" <<GO_COLOR>> {
        [文件服务] as FileService <<Go>>
        [通话服务] as CallService <<Node.js>>
        [认证服务] as AuthService <<Go>>
        [通知服务] as NotificationService <<Python>>
    }
}

package "中间件层" {
    [消息队列] as MessageQueue <<Kafka>>
    [服务发现] as ServiceDiscovery <<Consul>>
    [配置中心] as ConfigCenter <<Apollo>>
    [链路追踪] as Tracing <<Jaeger>>
}

package "数据存储层" {
    package "主存储" <<MONGO_COLOR>> {
        [用户数据库] as UserDB <<MongoDB>>
        [消息数据库] as MessageDB <<MongoDB分片>>
        [群组数据库] as GroupDB <<PostgreSQL>>
    }
    
    package "缓存存储" <<REDIS_COLOR>> {
        [Redis主集群] as RedisMain <<Redis>>
        [Redis缓存集群] as RedisCache <<Redis>>
        [会话存储] as SessionStore <<Redis>>
    }
    
    package "文件存储" {
        [对象存储] as ObjectStorage <<MinIO/S3>>
        [CDN分发] as CDN <<Cloudflare>>
    }
}

package "基础设施层" {
    [监控告警] as Monitoring <<Prometheus>>
    [日志分析] as Logging <<ELK>>
    [安全网关] as Security <<WAF>>
    [容器编排] as Container <<Kubernetes>>
}

package "外部服务" {
    [推送服务] as PushService <<APNs/FCM>>
    [短信服务] as SMSService <<阿里云>>
    [音视频通话] as RTCService <<Agora>>
    [内容审核] as ContentFilter <<腾讯云>>
}

' 客户端到接入层
WebApp --> LoadBalancer
MobileApp --> LoadBalancer  
DesktopApp --> LoadBalancer
AdminPanel --> LoadBalancer

' 接入层内部
LoadBalancer --> APIGateway
LoadBalancer --> WSGateway

' 接入层到微服务
APIGateway --> UserService
APIGateway --> MessageService
APIGateway --> GroupService
APIGateway --> ChannelService
APIGateway --> FileService
APIGateway --> CallService
APIGateway --> AuthService

WSGateway --> MessageService
WSGateway --> CallService

' 微服务内部调用
UserService --> AuthService
MessageService --> UserService
MessageService --> GroupService
GroupService --> UserService
ChannelService --> UserService
NotificationService --> UserService

' 微服务到中间件
MessageService --> MessageQueue
NotificationService --> MessageQueue
UserService --> ServiceDiscovery
MessageService --> ServiceDiscovery
UserService --> ConfigCenter
MessageService --> Tracing

' 微服务到数据存储
UserService --> UserDB
MessageService --> MessageDB
GroupService --> GroupDB
ChannelService --> UserDB

UserService --> RedisMain
MessageService --> RedisCache
AuthService --> SessionStore

FileService --> ObjectStorage
FileService --> CDN

' 外部服务集成
NotificationService --> PushService
NotificationService --> SMSService
CallService --> RTCService
MessageService --> ContentFilter

' 基础设施监控
Monitoring --> UserService
Monitoring --> MessageService
Logging --> APIGateway
Security --> LoadBalancer
Container --> UserService
Container --> MessageService

' 数据流向
MessageQueue --> NotificationService : "异步通知"
RedisCache --> MessageService : "快速读取"
CDN --> WebApp : "文件分发"
CDN --> MobileApp : "文件分发"

note right of MessageDB
  消息分片存储策略:
  - 按用户ID分片
  - 按时间分区
  - 冷热数据分离
end note

note right of RedisCache
  缓存策略:
  - 在线用户状态
  - 热点消息缓存
  - 会话信息
  - 未读消息计数
end note

note right of MessageQueue
  消息队列主题:
  - message.send
  - notification.push  
  - user.online
  - file.upload
end note

@enduml 