@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title 心理检测系统 - API设计图

LAYOUT_WITH_LEGEND()

' 定义颜色
!define GATEWAY_COLOR #2c3e50
!define CLIENT_API_COLOR #3498db
!define PROFESSIONAL_API_COLOR #e74c3c
!define ADMIN_API_COLOR #f39c12
!define SECURITY_COLOR #8e44ad
!define ANALYTICS_COLOR #9b59b6

' API网关和安全层
Container(apigateway, "API网关", "Kong + WAF", "统一入口、安全防护、流量控制") <<GATEWAY_COLOR>>
Container(authgateway, "认证网关", "OAuth 2.0 + OIDC", "身份认证、授权管理、安全审计") <<SECURITY_COLOR>>
Container(encryption, "加密代理", "TLS 1.3 + mTLS", "端到端加密、证书管理") <<SECURITY_COLOR>>

' 来访者端API服务
package "来访者服务API" {
    Container(clientapi, "用户管理API", "Node.js/Express", "用户注册、档案管理、隐私设置") <<CLIENT_API_COLOR>>
    Container(assessmentapi, "评估测试API", "Java/Spring Security", "测试执行、答题提交、进度保存") <<CLIENT_API_COLOR>>
    Container(resultapi, "结果查看API", "Python/FastAPI", "结果获取、报告查看、历史记录") <<CLIENT_API_COLOR>>
    Container(consentapi, "同意管理API", "Node.js/Express", "知情同意、隐私授权、权限管理") <<CLIENT_API_COLOR>>
}

' 专业人员API服务
package "专业服务API" {
    Container(professionalapi, "专业认证API", "Java/Spring Security", "资质验证、执业管理、权限控制") <<PROFESSIONAL_API_COLOR>>
    Container(clientmgmtapi, "来访者管理API", "Node.js/Express", "客户档案、测试记录、进展跟踪") <<PROFESSIONAL_API_COLOR>>
    Container(supervisionapi, "督导管理API", "Python/Django", "督导关系、案例讨论、专业发展") <<PROFESSIONAL_API_COLOR>>
    Container(interventionapi, "干预管理API", "Java/Spring", "危机干预、治疗计划、效果评估") <<PROFESSIONAL_API_COLOR>>
}

' 量表管理API服务
package "量表服务API" {
    Container(scaleapi, "量表管理API", "Java/Spring Boot", "量表库、题目管理、版本控制") <<CLIENT_API_COLOR>>
    Container(scoringapi, "计分引擎API", "Python/FastAPI", "自动计分、标准化、结果计算") <<CLIENT_API_COLOR>>
    Container(normapi, "常模服务API", "R/Plumber", "常模数据、统计分析、标准化参考") <<ANALYTICS_COLOR>>
}

' 安全与合规API服务
package "安全合规API" {
    Container(auditapi, "审计日志API", "Go/Gin", "操作日志、访问记录、安全监控") <<SECURITY_COLOR>>
    Container(privacyapi, "隐私保护API", "Node.js/Express", "数据脱敏、匿名化、删除管理") <<SECURITY_COLOR>>
    Container(complianceapi, "合规检查API", "Java/Spring", "法规遵循、认证管理、报告生成") <<SECURITY_COLOR>>
    Container(encryptionapi, "加密服务API", "Go/Crypto", "数据加密、密钥管理、安全传输") <<SECURITY_COLOR>>
}

' 危机干预API服务
package "危机服务API" {
    Container(riskapi, "风险评估API", "Python/FastAPI", "风险计算、预警分析、威胁识别") <<PROFESSIONAL_API_COLOR>>
    Container(alertapi, "预警通知API", "Node.js/Socket.io", "实时预警、紧急通知、自动响应") <<PROFESSIONAL_API_COLOR>>
    Container(emergencyapi, "紧急响应API", "Java/Spring", "紧急联系、危机处理、资源调度") <<PROFESSIONAL_API_COLOR>>
}

' 数据分析API服务
package "分析服务API" {
    Container(analyticsapi, "数据分析API", "Python/FastAPI", "统计分析、趋势识别、洞察挖掘") <<ANALYTICS_COLOR>>
    Container(reportapi, "报告生成API", "Java/Spring", "自动报告、可视化、PDF生成") <<ANALYTICS_COLOR>>
    Container(researchapi, "研究数据API", "R/Plumber", "匿名化数据、科研支持、统计服务") <<ANALYTICS_COLOR>>
}

' 系统管理API服务
package "管理服务API" {
    Container(adminapi, "系统管理API", "Java/Spring Boot", "用户管理、系统配置、权限分配") <<ADMIN_API_COLOR>>
    Container(monitorapi, "监控服务API", "Go/Gin", "系统监控、性能分析、健康检查") <<ADMIN_API_COLOR>>
    Container(backupapi, "备份恢复API", "Python/FastAPI", "数据备份、灾难恢复、版本管理") <<ADMIN_API_COLOR>>
}

' AI智能服务API
package "AI智能API" {
    Container(aianalysisapi, "AI分析API", "Python/TensorFlow Serving", "智能分析、模式识别、预测建模") <<ANALYTICS_COLOR>>
    Container(nlpapi, "自然语言API", "Python/spaCy", "文本分析、情感识别、语义理解") <<ANALYTICS_COLOR>>
    Container(recommendapi, "智能推荐API", "Python/Scikit-learn", "个性化推荐、治疗建议、资源匹配") <<ANALYTICS_COLOR>>
}

' 外部集成API
package "外部集成API" {
    Container_Ext(smsapi, "短信服务API", "阿里云SMS", "验证码、紧急通知、预约提醒")
    Container_Ext(emailapi, "邮件服务API", "SendGrid", "邮件通知、报告发送、系统通知")
    Container_Ext(paymentapi, "支付服务API", "Stripe", "在线支付、订阅管理、财务对账")
    Container_Ext(calendarapi, "日历集成API", "Google Calendar", "预约管理、日程同步、提醒服务")
}

' 实时通信API
package "实时通信API" {
    Container(websocketapi, "WebSocket API", "Socket.io", "实时通信、状态同步、即时反馈") <<CLIENT_API_COLOR>>
    Container(notificationapi, "推送通知API", "Firebase FCM", "移动推送、浏览器通知、邮件推送") <<CLIENT_API_COLOR>>
    Container(videoapi, "视频会议API", "WebRTC", "远程咨询、在线督导、虚拟治疗") <<PROFESSIONAL_API_COLOR>>
}

' API路由和安全控制
Rel(encryption, apigateway, "加密通信", "TLS 1.3")
Rel(apigateway, authgateway, "身份验证", "OAuth 2.0")

' 来访者API调用流
Rel(authgateway, clientapi, "用户管理", "REST + JWT")
Rel(authgateway, assessmentapi, "测试执行", "REST + 权限控制")
Rel(authgateway, resultapi, "结果查看", "REST + 数据脱敏")
Rel(authgateway, consentapi, "同意管理", "REST + 数字签名")

' 专业人员API调用流
Rel(authgateway, professionalapi, "专业认证", "REST + mTLS")
Rel(authgateway, clientmgmtapi, "客户管理", "REST + RBAC")
Rel(authgateway, supervisionapi, "督导管理", "REST + 审计")
Rel(authgateway, interventionapi, "干预管理", "REST + 紧急权限")

' 量表服务API调用
Rel(authgateway, scaleapi, "量表管理", "REST API")
Rel(authgateway, scoringapi, "自动计分", "REST + 算法")
Rel(authgateway, normapi, "常模服务", "REST + 统计")

' 安全合规API调用
Rel(authgateway, auditapi, "审计日志", "REST + 只读")
Rel(authgateway, privacyapi, "隐私保护", "REST + 加密")
Rel(authgateway, complianceapi, "合规检查", "REST + 审计")
Rel(authgateway, encryptionapi, "加密服务", "REST + HSM")

' 危机干预API调用
Rel(authgateway, riskapi, "风险评估", "REST + 实时")
Rel(authgateway, alertapi, "预警通知", "WebSocket + SSE")
Rel(authgateway, emergencyapi, "紧急响应", "REST + 优先级")

' 分析服务API调用
Rel(authgateway, analyticsapi, "数据分析", "REST + 匿名化")
Rel(authgateway, reportapi, "报告生成", "REST + PDF")
Rel(authgateway, researchapi, "研究数据", "REST + 去标识")

' 管理服务API调用
Rel(authgateway, adminapi, "系统管理", "REST + 超级权限")
Rel(authgateway, monitorapi, "系统监控", "REST + Metrics")
Rel(authgateway, backupapi, "备份恢复", "REST + 定时任务")

' AI服务API调用
Rel(authgateway, aianalysisapi, "AI分析", "REST + GPU")
Rel(authgateway, nlpapi, "文本分析", "REST + NLP")
Rel(authgateway, recommendapi, "智能推荐", "REST + ML")

' 实时通信API
Rel(authgateway, websocketapi, "实时通信", "WebSocket")
Rel(authgateway, notificationapi, "推送通知", "FCM/APNS")
Rel(authgateway, videoapi, "视频会议", "WebRTC")

' 外部服务集成
Rel(alertapi, smsapi, "短信预警", "SMS API")
Rel(reportapi, emailapi, "报告发送", "Email API")
Rel(clientapi, paymentapi, "支付处理", "Payment API")
Rel(interventionapi, calendarapi, "预约管理", "Calendar API")

' API间内部调用
Rel(assessmentapi, scoringapi, "自动计分", "内部调用")
Rel(scoringapi, riskapi, "风险计算", "内部调用")
Rel(riskapi, alertapi, "预警触发", "内部调用")
Rel(clientmgmtapi, auditapi, "操作审计", "内部调用")
Rel(resultapi, privacyapi, "数据脱敏", "内部调用")

note right of authgateway : **安全认证机制**\n• OAuth 2.0 + OIDC标准\n• 多因素身份验证\n• 基于角色的访问控制\n• JWT令牌管理\n• 会话安全控制

note right of assessmentapi : **测试API设计**\n• POST /assessments/start - 开始测试\n• GET /assessments/{id}/questions - 获取题目\n• POST /assessments/{id}/answers - 提交答案\n• GET /assessments/{id}/progress - 测试进度\n• PUT /assessments/{id}/pause - 暂停测试

note right of riskapi : **风险评估API**\n• POST /risk/evaluate - 风险评估\n• GET /risk/factors - 风险因子\n• POST /risk/alert - 预警设置\n• GET /risk/history - 风险历史\n• POST /risk/intervention - 干预建议

note right of privacyapi : **隐私保护API**\n• POST /privacy/anonymize - 数据匿名化\n• DELETE /privacy/data - 数据删除\n• GET /privacy/consent - 同意状态\n• POST /privacy/encrypt - 数据加密\n• GET /privacy/audit - 隐私审计

note right of aianalysisapi : **AI分析API**\n• POST /ai/analyze - 智能分析\n• GET /ai/models - 可用模型\n• POST /ai/predict - 预测分析\n• GET /ai/insights - 洞察发现\n• POST /ai/recommend - 智能推荐

@enduml 